/* $Id$ */
/*
 *  UNIX-Connect, a ZCONNECT(r) Transport and Gateway/Relay.
 *  Copyright (C) 1993-94  Martin Husemann
 *  Copyright (C) 1999     Dirk Meyer
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 * ------------------------------------------------------------------------
 * Eine deutsche Zusammenfassung zum Copyright dieser Programme sowie der
 * GNU General Public License finden Sie in der Datei README.1st.
 * ------------------------------------------------------------------------
 *
 *  Bugreports, suggestions for improvement, patches, ports to other systems
 *  etc. are welcome. Contact the maintainer by e-mail:
 *  dirk.meyer@dinoex.sub.org or snail-mail:
 *  Dirk Meyer, Im Grund 4, 34317 Habichstwald
 *
 *  There is a mailing-list for user-support:
 *   unix-connect@mailinglisten.im-netz.de,
 *  write a mail with subject "Help" to
 *   nora.e@mailinglisten.im-netz.de
 *  for instructions on how to join this list.
 */

/*
 *  hash.epilogue:
 *
 *    Wird hinter die Ausgabe von "gperf" gehaengt und vervollstaendigt
 *    die Lookup-Funktionen.
 *
 * ------------------------------------------------------------------------
 */

#include "utility.h"

#include <stdio.h>
#include <stdlib.h>

#include "crc.h"
#include "header.h"
#include "uulog.h"
#include "hd_nam.h"

const char *headers[] = {
#include "hd_nlist.h"
NULL
};

static int nextNewCode = TOTAL_KEYWORDS +23;
typedef struct newHeaderRecstruct
{
	unsigned code;
	char * header;
	struct newHeaderRecstruct * next;
} newHeaderRec;

static newHeaderRec * unknownHeaders = NULL;

int
identify(const char *name)
{
	static char hname[1000];
	const struct predefd *p;
	newHeaderRec *n;

	strncpy(hname, name, sizeof hname);
	strupr(hname);

	p = predefd_header(hname, strlen(hname));

	if (p)
		return p->code;

	/* Der Header war nicht vordefiniert, also in der lokalen
	 * Liste suchen
	 */
	for (n=unknownHeaders; n; n=n->next)
		if (strcmp(n->header, hname) == 0)
			return n->code;

	/* Ein unbekannter Header wurde gefunden. Er bekommt einen
	 * neuen Code und wird in der Liste vermerkt.
	 */
	n = (newHeaderRec*)dalloc(sizeof(newHeaderRec));
	n->next = unknownHeaders;
	unknownHeaders = n;
	n->code = nextNewCode++;
	n->header = dstrdup(hname);

	return n->code;
}

header_p
internal_add_header(const char *inhalt, unsigned int code,
			header_p ptr, const char *hname)
{
	header_p p, last, new;
	const char *hname2;

	/* Einfuegestelle suchen */
	last = NULL;
	for (p = ptr; p && (p->code < code); p = p->next)
		last = p;

	new = (header_p)dalloc(sizeof(header_t));
	new->text	 = dstrdup(inhalt);
	if (!new->text) out_of_memory(__FILE__);
	hname2 = ( code <= TOTAL_KEYWORDS ) ?
			headers[code] : hname;
	new->header	 = dstrdup(hname2);
	new->code	 = code;
	new->other	 = NULL;
	new->next	 = NULL;

	if (p && (p->code == code)) {
		/* Identischer Header, per other verketten */
		/*
		 *  MH: um die Reihenfolge beim Einlesen zu erhalten
		 *      wird jetzt am Ende der other-> angehaengt.
		 */
		for ( ; p->other; p = p->other)
			;
		p->other = new;
		new->next = p->next;
	} else if (!last) {
		/* Am Anfang einfuegen */
		new->next = ptr;
		ptr = new;
	} else if (!p) {
		/* Am Ende anhaengen */
		last->next = new;
		p=last->other;   /* WO: Die Next-Ptr der identischen Header */
		while (p) {      /* muessen auch verkettet werden */
		   p->next=new;
		   p=p->other;
		}
	} else {
		/* Neuer Header, zwischen last und p einfuegen */
		last->next = new;
		new->next = p;
		p=last->other;   /* WO: Die Next-Ptr der identischen Header */
		while (p) {      /* muessen auch verkettet werden */
		   p->next=new;
		   p=p->other;
		}
	}

	return ptr;
}

header_p
add_header(const char *inhalt, unsigned int code, header_p ptr)
{
	if (code > TOTAL_KEYWORDS+1)
		return NULL;

        return internal_add_header(inhalt, code, ptr, headers[code]);
}

